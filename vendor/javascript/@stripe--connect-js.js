// @stripe/connect-js@3.3.21 downloaded from https://ga.jspm.io/npm:@stripe/connect-js@3.3.21/dist/connect.esm.js

/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-unused-vars */
const t={setOnLoadError:t=>{},setOnLoaderStart:t=>{}};const e={"account-onboarding":{setFullTermsOfServiceUrl:t=>{},setRecipientTermsOfServiceUrl:t=>{},setPrivacyPolicyUrl:t=>{},setSkipTermsOfServiceCollection:t=>{},setCollectionOptions:t=>{},setOnExit:t=>{},setOnStepChange:t=>{}},"account-management":{setCollectionOptions:t=>{}},"notification-banner":{setCollectionOptions:t=>{},setOnNotificationsChange:t=>{}},"issuing-card":{setDefaultCard:t=>{},setCardSwitching:t=>{},setFetchEphemeralKey:t=>{},setShowSpendControls:t=>{}},"issuing-cards-list":{setFetchEphemeralKey:t=>{},setShowSpendControls:t=>{},setIssuingProgram:t=>{}},"financial-account":{setFinancialAccount:t=>{}},"financial-account-transactions":{setFinancialAccount:t=>{}},payments:{setDefaultFilters:t=>{}},"payment-details":{setPayment:t=>{},setOnClose:t=>{}},"tax-settings":{setHideProductTaxCodeSelector:t=>{},setDisplayHeadOfficeCountries:t=>{},setOnTaxSettingsUpdated:t=>{}},"tax-registrations":{setOnAfterTaxRegistrationAdded:t=>{},setDisplayCountries:t=>{}}};const n={"account-onboarding":"stripe-connect-account-onboarding",payments:"stripe-connect-payments","payment-details":"stripe-connect-payment-details",payouts:"stripe-connect-payouts","payouts-list":"stripe-connect-payouts-list",balances:"stripe-connect-balances","account-management":"stripe-connect-account-management","notification-banner":"stripe-connect-notification-banner","issuing-card":"stripe-connect-issuing-card","issuing-cards-list":"stripe-connect-issuing-cards-list","financial-account":"stripe-connect-financial-account","financial-account-transactions":"stripe-connect-financial-account-transactions",documents:"stripe-connect-documents","tax-registrations":"stripe-connect-tax-registrations","tax-settings":"stripe-connect-tax-settings"};const o="loadConnect was called but an existing Connect.js script already exists in the document; existing script parameters will be used";const s="https://connect-js.stripe.com/v0.1/connect.js";const c="https://connect-js.stripe.com/v1.0/connect.js";const findScript=()=>document.querySelectorAll(`script[src="${c}"]`)[0]||document.querySelectorAll(`script[src="${s}"]`)[0]||null;const injectScript=()=>{const t=document.createElement("script");t.src=c;const e=document.head;if(!e)throw new Error("Expected document.head not to be null. Connect.js requires a <head> element.");document.head.appendChild(t);return t};let i=null;const loadScript=()=>{if(i!==null)return i;i=new Promise(((t,e)=>{if(typeof window!=="undefined"){window.StripeConnect&&console.warn(o);if(window.StripeConnect){const e=createWrapper(window.StripeConnect);t(e)}else try{let n=findScript();n?console.warn(o):n||(n=injectScript());n.addEventListener("load",(()=>{if(window.StripeConnect){const e=createWrapper(window.StripeConnect);t(e)}else e(new Error("Connect.js did not load the necessary objects"))}));n.addEventListener("error",(()=>{e(new Error("Failed to load Connect.js"))}))}catch(t){e(t)}}else e("ConnectJS won't load when rendering code in the server - it can only be loaded on a browser. This error is expected when loading ConnectJS in SSR environments, like NextJS. It will have no impact in the UI, however if you wish to avoid it, you can switch to the `pure` version of the connect.js loader: https://github.com/stripe/connect-js#importing-loadconnect-without-side-effects.")}));return i};const hasCustomMethod=t=>t in e;const initStripeConnect=(o,s)=>{var c;const i=(()=>{try{return s.fetchClientSecret()}catch(t){return Promise.reject(t)}})();const r=(c=s.metaOptions)!==null&&c!==void 0?c:{};const a=o.then((t=>t.initialize(Object.assign(Object.assign({},s),{metaOptions:Object.assign(Object.assign({},r),{eagerClientSecretPromise:i})}))));return{create:o=>{let s=n[o];s||(s=o);const c=document.createElement(s);const i=hasCustomMethod(o)?e[o]:{};const r=Object.assign(Object.assign({},i),t);for(const t in r)c[t]=function(e){a.then((()=>{this[`${t}InternalOnly`](e)}))};a.then((t=>{if(!c.isConnected&&!c.setConnector){const t=c.style.display;c.style.display="none";document.body.appendChild(c);document.body.removeChild(c);c.style.display=t}if(!c||!c.setConnector)throw new Error(`Element ${o} was not transformed into a custom element. Are you using a documented component? See https://docs.stripe.com/connect/supported-embedded-components for a list of supported components`);c.setConnector(t.connect)}));return c},update:t=>{a.then((e=>{e.update(t)}))},debugInstance:()=>a,logout:()=>a.then((t=>t.logout()))}};const createWrapper=t=>{window.StripeConnect=window.StripeConnect||{};window.StripeConnect.optimizedLoading=true;const e={initialize:e=>{var n;const o=(n=e.metaOptions)!==null&&n!==void 0?n:{};const s=t.init(Object.assign(Object.assign({},e),{metaOptions:Object.assign(Object.assign({},o),{sdk:true,sdkOptions:{sdkVersion:"3.3.21"}})}));return s}};return e};const r=Promise.resolve().then((()=>loadScript()));let a=false;r.catch((t=>{a||console.warn(t)}));const loadConnectAndInitialize=t=>{a=true;return initStripeConnect(r,t)};export{loadConnectAndInitialize};

